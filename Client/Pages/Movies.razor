@page  "/movies"

@using Data.Movie
@using Data.ViewModels
@using Client.Pages
@using System.Collections.Generic
@inject MovieService MovieService

<LoadingBar Loading="this.Loading"></LoadingBar>


<h1>There is no such place as <span>Pornhub</span></h1>
@*<h3>Movies</h3>*@

@if(this.Selected != null)
{
<div class="movies-selected">
    <div class="movies-selected-close" @onclick="() => { this.Selected = null;  }">Close</div>
    <MovieDetail Movie="this.Selected"></MovieDetail>
</div>
}


<div class="movies-root">
    <form>
        <input @bind="@this.Searched" placeholder="name" />
        <button type="button" @onclick="this.GetMovie">Get movie!</button>
        Year: <input type="checkbox" @bind="this.SearchYear" />
        @if (this.SearchYear)
        {
            <input type="number" @bind="this.Year" placeholder="year" />
        }

        Type: <input type="checkbox" @bind="this.SearchType" />
        @if (this.SearchType)
        {
            @*<input @bind="this.Type" placeholder="type" />*@
            <select @bind="this.Type">
                <option value="movie">Movie</option>
                <option value="series">Series</option>
                <option value="episode">Episode</option>
                <option value="game">Game</option>
            </select>
        }
    </form>

    @if (this.SearchedMovies != null)
    {
        <ul class="movies">
            @foreach (var movie in this.SearchedMovies)
            {
                <li class="movies-movie"> <MovieDisplay Movie="@movie" OnClick="Select" /> </li>
            }
        </ul>

        <form>
            <button type="button" @onclick="LoadNext">Load next...</button>
        </form>
    }

</div>


@code {
    private IEnumerable<MovieViewModel> SearchedMovies;

    private bool SearchYear;
    private bool SearchType;

    private int Year = 2000;
    private string Type = "movie";

    public bool Loading { get; private set; }

    public MovieDetailViewModel Selected { get; private set; }

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    public string Searched { get; set; } = "";
    public async Task GetMovie()
    {
        this.Loading = true;

        this.SearchedMovies = null;
        this.StateHasChanged();

        this.SearchedMovies = await this.MovieService.SearchAsync(this.Searched, this.SearchType ? this.Type : null, this.SearchYear ? this.Year : -1);

        this.Loading = false;
        this.StateHasChanged();
    }

    public async Task Select(MovieViewModel movie)
    {
        this.Loading = true;

        this.Selected = await this.MovieService.GetDetailAsync(movie);

        this.Loading = false;
    }

    public async Task LoadNext()
    {
        this.Loading = true;
        var batch = await this.MovieService.SearchAsync(this.Searched, this.SearchType ? this.Type : null, this.SearchYear ? this.Year : -1, this.SearchedMovies.Count() % 10 + 2);
        if (batch == null)
        {
            this.Loading = false;
            return;
        }

        this.SearchedMovies = this.SearchedMovies.Concat(batch);

        this.Loading = false;
        this.StateHasChanged();
    }
}
